name: Test/Release/Build

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12]

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm lint, typecheck, test
        run: |
          npm ci
          npm run lint
          npm run typecheck
          npm test
        env:
          CI: true

  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt
  build:
    name: Build & Upload Assets
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        node-version: [12]

    runs-on: ${{ matrix.os }}

    if: contains(github.ref, 'tags/v')
    
    needs: [test, release]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Build
        run: |
          npm ci
          npm run build:electron
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release File Name & Upload URL
        id: get_release_info
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value

      - name: Upload Windows Asset
        id: upload-windows-asset
        if: matrix.os == 'windows-latest'
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/capra_web_ui_setup.exe
          asset_name: capra_web_ui_setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable
          
      - name: Upload Ubuntu Asset
        id: upload-linux-asset
        if: matrix.os == 'ubuntu-latest'
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/capra_web_ui_setup.deb
          asset_name: capra_web_ui_setup.deb
          asset_content_type: application/vnd.debian.binary-package
